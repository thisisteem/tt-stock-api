services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tt-stock-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - tt-stock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: tt-stock-api:latest
    container_name: tt-stock-api
    restart: unless-stopped
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Application configuration
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-8080}
      ENV: ${ENV:-production}
    ports:
      - "${PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tt-stock-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Custom network for service communication
networks:
  tt-stock-network:
    driver: bridge